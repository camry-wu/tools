<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
	   http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- Notice: security=none will let this url pass through all filter -->

	<!-- verify code -->

	<!-- Notice: use-expressions
		http://www.family168.com/tutorial/springsecurity3/html/el-access.html
	-->
	<!--
		 access="hasRole()"
		 access="permitAll"
		 access="anonymous"
		 access="authenticated"
		 access="rememberMe"
		 access="fullyAuthenticated"
	-->

	<!-- cache manager -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>

	<!-- credentials matcher -->
	<bean id="credentialsMatcher" class="net.vitular.tools.cooking.auth.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager"/>
		<property name="hashAlgorithmName" value="md5"/>
		<property name="hashIterations" value="2"/>
		<property name="storedCredentialsHexEncoded" value="true"/>
	</bean>

	<bean id="userDetailsService" class="net.vitular.tools.cooking.auth.DBUserDetailsService"/>

	<!-- realm -->
	<bean id="userRealm" class="net.vitular.tools.cooking.auth.UserRealm">
		<property name="userDetailsService" ref="userDetailsService"/>
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
		<property name="cachingEnabled" value="true"/>
		<property name="authenticationCachingEnabled" value="true"/>
		<property name="authenticationCacheName" value="authenticationCache"/>
		<property name="authorizationCachingEnabled" value="true"/>
		<property name="authorizationCacheName" value="authenticationCache"/>
	</bean>

	<!-- session id generator -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

	<!-- session dao -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>

	<!-- session validation -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="1800000"/>
		<property name="sessionManager" ref="sessionManager"/>
	</bean>

	<!-- session cookie  -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="180000"/>
		<!--
			 <property name="name" value=""/>
			 <property name="domain" value=".xxx.com"/>
			 <property name="path" value="/"/>
		-->
	</bean>

	<!-- session manager  -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000"/>
		<property name="deleteInvalidSessions" value="true"/>
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<property name="sessionDAO" ref="sessionDAO"/>
		<property name="sessionIdCookieEnabled" value="true"/>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>

	<!--
	<bean id="servletContainerSessionManager" class="org.apache.shiro.web.session.mgt.ServletContainerSessionManager"/>
	-->

	<!-- security manager  -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realms">
			<list>
				<ref bean="userRealm"/>
			</list>
		</property>
		<property name="sessionManager" ref="sessionManager"/>
		<property name="cacheManager" ref="cacheManager"/>
	</bean>

	<!-- invoke SecurityUtils.setSecurityManager(securityManager) -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
		<property name="arguments" ref="securityManager"/>
	</bean>

	<!-- shiro lifecycle -->
	<bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- form auth filter -->
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="username"/>
		<property name="passwordParam" value="password"/>
		<property name="loginUrl" value="/service/auth/login.html"/>
	</bean>

	<!-- form web filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/service/auth/login.html"/>
		<property name="unauthorizedUrl" value="/service/auth/unauthorized.html"/>
		<property name="filters">
			<map>
				<entry key="authc" value-ref="formAuthenticationFilter"/>
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/index.html = anon
				/service/auth/unauthorized.html = anon
				/service/auth/login.html = authc
				/service/auth/logout.html = logout
				/** = user
			</value>
		</property>
	</bean>

	<!-- shiro aop -->
	<aop:config proxy-target-class="true"></aop:config>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
</beans>
