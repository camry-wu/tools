# FakerExpression
##############################################################################
#   IFileFaker.java
#   AbstractFileFaker.java
#   ---
#   TextPlainFileFaker.java
#   CSVFileFaker.java
#   SqlFileFaker.java
#   SyslogFileFaker.java
#   ---
#   DBFileFaker4Spring.java
#   
#   ==============================
#   IRowFaker.java
#   AbstractRowFaker.java
#   ---
#   SqlRowFaker.java
#   CSVRowFaker.java
#   SyslogRowFaker.java
#   ---
#   DBRowFaker.java
#   
#   ==============================
#   IFieldFaker.java
#   AbstractFieldFaker.java
#   ---
#   BooleanFieldFaker.java
#   NumberFieldFaker.java
#   StringFieldFaker.java
#   DateFieldFaker.java
#   IPFieldFaker.java
#   MACFieldFaker.java
#   CompositeFieldFaker.java
#   SequenceFieldFaker.java
#
##############################################################################
# global setup:
#       debug:              if true, donot save record, just print debug information
#       dateOffset:         the offset of date.
#       dateLessThenNow:    is the generated date less then now
#
# file setup:
#       generator:          output records to somewhere.
#                           DBFileGenerator:        DB
#                           CSVFileGenerator:       File-CSV
#                           SyslogFileGenerator:    File-syslog
#
#       output.path:        the output file path
#                           can include {date format: SECOND | MILLIS | other format string}
#       header:             the header of the text file, if this property is null, donot write header
#       footer:             the footer of the text file, if this property is null, donot write footer
#       recordCount:        the count of records.
#
#       applicationContextPath: spring config file path
#       daoBeanId:              dao bean id
#       saveMethodName:         save method name
#       saveMethodParamClass:   save method param class
#
# record setup:
#       className:          record class name
#       db.tableName:       record DB table name
#       fields.array:       the fields of record (indicated the fields' order)
#       escape.char:        ' 或者 " 等用于括住 field 的字符，fieldValue 中的这种字符需要被转义
#
# field setup:
#       type:               number:     (format: string, number)    (limit: max, min)
#                           boolean:    (format: string, number[0,1], boolean[false,true])
#                           string:     (format: ?)                 (limit: length)
#                           date:       (format: string, number)    (limit: lessThenNow)
#                                       ([early | late]Then:relatedField)   (howmuch: millisecond)
#                           IP:         (format: string, number)    (limit: mask)
#                           MAC:        (format: string)
#                           composite:  (format: string)            (limit: fields count)
#                                       field.x.0.type...
#                                       field.x.1.type...
#                           sequence,   (startWith: number)         (step: step)
#
#                           format: <>
#                           limit: ()
#                           early | late: $field[+|-]howmuch
#                           array: [,]
#                           options: {1, 2, 3}
#                           related: &field
#                           (x) alias
#                           (x) fixValue: only one options
#
#       alias:              field printable name
#       arraySeprator:      seprator of array, or null
#       options:            if this property is not null, the field's value should select one from this random.
#       relatedField:       if this property is not null, the fields value should select from options.relatedFieldValue
#       fixValue:           if this property is not null, the field's value is fixed.
#                           the date field's fix format="yyyy-MM-dd HH:mm:ss"
#
##############################################################################
# tools/faker4j/IFieldGenerator.java
# tools/faker4j/AbstractFieldGenerator.java
#
# tools/faker4j/BooleanFieldGenerator.java
#       <string | number | boolean>
#       [,]
#       
# tools/faker4j/DateFieldGenerator.java
#       <SECOND, MILLIS, yyyy-mm-dd>        # 各种情况下都可能需要指定格式化方式
#       $relatedField[+|-]number            # 与 ()[]{} 互斥
#
#       [,]                                 # 如果有成为数组的情况
#       {options:1, 2, 3, ...}              # 如果只有一个选项即是 fixValue
#       {file:path}                         # 从一个选项文件中得到取值
#       {map@relatedField:{}}               # 这种情况下需要能够访问到 record 中
#                                             另一个字段的取值，再根据它的取值
#                                             生成一个对应的值
#       (lessThenNow:x, offset:y)           # 只在 random 情况下才需要范围限制
#
#       1. <>$xx[+|-]number                 # 关联计算出的值, 能计算的才能用这个方式
#       2. <>[]{}                           # options 方式，可以 format，也可以组 []
#       3. <>[]()                           # random 方式，可以 format，也可以组 []
#       
# tools/faker4j/IPFieldGenerator.java
#       <string, number>
#       (mask)
#       {options|file|map}
#       [,]
#       
# tools/faker4j/MACFieldGenerator.java
#       <string>
#       {options|file|map}
#       [,]
#       
# tools/faker4j/NumberFieldGenerator.java
#       <string, number>
#       (min, max)
#       {options|file|map}
#       [,]
#       
# tools/faker4j/SequenceFieldGenerator.java
#       (startWith, step)
#       
# tools/faker4j/StringFieldGenerator.java
#       (char:x..y|word:x..y|sentence:x..y|pragraph:x..y)
#       {options|file|map}
#       [,]
#       
# tools/faker4j/CompositeFieldGenerator.java
#       <formatString>
#       (size)
#       [,]
#
# Note:
# 1. how to parse faker expression (study velocity)
# 2. has default setting

# ----------- global setup ------------------------------
global.debug=false
global.date.offset=-2
global.date.lessThenNow=true

# eps is the data's timestamp grow speed
# timestamp increase 1 after generate these datas
global.eps=2

# data generate speed: EPS
global.speed=10

global.start.timestamp=2013-08-10 00:00:01.000

# ----------- file setup ------------------------------
file.faker=com.vitular.tools.faker4j.TextPlainFileFaker
file.record.count=5
file.output.path=/tmp/nat.log.{MILLIS}
#file.output.path=/home/wuhao/work/s3/nat/tmp/nat.log
#file.header=type, action, src, natSrc, natSrcPortBeg, natSrcPortEnd, time, elapsed
file.footer=
#file.csv.head=

# ------------ record setup ---------------------------
record.fields.array=date, time, logid, action, saddr, nat, portbegin, portend, duration, msg
#record.fields.array=date, time, logid, action, sourceAddress, natSourceAddress, natSourcePortBegin, natSourcePortEnd, timestamp, elapsedTime

# syslog
record.format=date={0} time={1} devname=TOP3_Unit5_Test devid=FG3K913E10700065 logid={2} type=event subtype=system level=notice vd="01_Bmark" action={3} saddr={4} nat={5} portbegin={6} portend={7} poolname="p5_902_pba" duration={8} msg="{9}"
# record.escape.char="

# sql
# record.format=insert .... (f1, f2, f3) values(''{1}'', ''{2}'', ''{3}'');
# record.escape.char='

# cvs
# record.format="{0}", "{1}", "{2}", "{3}", "{4}", "{5}", "{6}", "{7}"
# record.escape.char="

# ------------ fields setup ---------------------------
#field.timestamp=date/r:<MILLIS>(lessThenNow=false)
field.date=date/ol:<yyyy-MM-dd>{2013-12-04}

field.time=date/c:<HH:mm:ss>time+1/60(1386086400000)

field.logid=sequence/t:<8>(10000, 1)

field.action=string/ol:<6>{pba-create, pba-close}

field.saddr=IP/r:<string>(10.168.15.1/16)
#field.saddr=IP/ol:<string>{10.168.15.1}

field.nat=IP/r:<string>(202.1.1.1/24)
#field.nat=IP/ol:<string>{202.1.1.1}

field.portbegin=number/r:<2>(1000..9999)

field.portend=number/c:<2>portbegin+300

field.duration=number/r:<4>(1000..9999)

field.msg=string/om:<20>action{pba-create:{Pba ippool create}, pba-close:{Pba ippool close}}
